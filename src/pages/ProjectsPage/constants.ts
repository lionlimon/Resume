import { ExpItem } from './types';

const stackList: ExpItem[] = [
  {
    title: 'Разработка корзины в крупном интернет-магазине',
    text: '<p>Это была большая и сложная корзина из 3-4 шагов. Она содержала в себе:</p>'
      + '<ul>'
        + '<li>Список товаров в корзине</li>'
        + '<li>Выбор способов доставки, постоматы, пвз с взаимодействием с картами</li>'
        + '<li>Выбор способов оплаты</li>'
        + '<li>Финальный экран с информацией о заказе</li>'
        + '<li>Регистрация пользователя</li>'
      + '</ul>',

    labels: [
      'vue 2',
    ],
  },
  {
    title: 'Разработка платформы для обучения студентов',
    text:
        '<p>'
        + 'Проект попал в компанию на поддержку. Приложение достаточно большое, имеет страницы как для клиентов,'
        + 'так и для админов и менеджеров.'
      + '</p>'
      + '<p>'
        + 'Админка достаточно масштабная и гибкая, я реализовывал конструктор модулей для обучения и самих уроков.'
      + '</p>',
    labels: [
      'React',
      'Typescript',
    ],
  },
  {
    title: 'Разработка комплекса приложений для взаимодействия клиентов заведения и сотрудников',
    text: `
      <p>Фигурировал в трёх проектах:</p>
      <ul>
        <li>Web-приложение электронного меню для заведений: создание корзины, оформление заказа, вызов сотрудников, полная и раздельная оплата заказа</li>
        <li>CRM-система для управления заведениями и их подключения</li>
        <li>Админ-панель для управления справочниками и логиками общей системы</li>
      </ul> 
      
      <p>
        Тут было реализована куча крутых фич, таких как <span class="nda"></span> и <span class="nda"></span>.
        Клиенты могли сделать <span class="nda"></span> официанту, а потом <span class="nda"></span>
      </p>
    `,
    labels: [
      'Vue 3',
      'Typescript',
    ],
  },

  {
    title: 'Разработка главного сайта для компании',
    text: `
      <p>
        Сделал полностью сайт для компании с блогом. 
        С виду обычный сайт с классным дизайном, но интересно, как это работает внутри. 
        Системные администраторы сразу дали понять, что источником данных должны быть статичные файлы, но при этом нужна возможность 
        заполнять контент в понятном для контент менеджеров интерфейсе.
      </p>
      
      <p>
        В итоге вышла такая SSG связка: 
        <strong>nuxt 3</strong>, <strong>nuxt-content</strong>, <strong>cloudcannon</strong>. 
      </p>
      
      <ul>
        <li>
          Контент менеджер на сервисе cloudcannon заполняет контент в привычном виде
        </li>
        <li>Этот контент в виде .md файлов отправляется в gitlab</li>
        <li>Запускается CI/CD, генерируются статичные за счёт плагина nuxt-content html файлы, которые летят на aws хостинг</li>
      </ul>
    `,
    labels: [
      'Nuxt 3',
      'Typescript',
    ],
  },
];

export default stackList;
